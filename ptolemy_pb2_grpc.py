# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ptolemy_pb2 as ptolemy__pb2


class SensorsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TurnOnImu = channel.unary_unary(
                '/sensors.Sensors/TurnOnImu',
                request_serializer=ptolemy__pb2.ImuCtrl.SerializeToString,
                response_deserializer=ptolemy__pb2.Response.FromString,
                )
        self.TurnOffImu = channel.unary_unary(
                '/sensors.Sensors/TurnOffImu',
                request_serializer=ptolemy__pb2.ImuCtrl.SerializeToString,
                response_deserializer=ptolemy__pb2.Response.FromString,
                )
        self.JsOverride = channel.unary_unary(
                '/sensors.Sensors/JsOverride',
                request_serializer=ptolemy__pb2.MlCtrl.SerializeToString,
                response_deserializer=ptolemy__pb2.Response.FromString,
                )
        self.SetNavigationScaling = channel.unary_unary(
                '/sensors.Sensors/SetNavigationScaling',
                request_serializer=ptolemy__pb2.NavigationScaling.SerializeToString,
                response_deserializer=ptolemy__pb2.Response.FromString,
                )
        self.GPSStream = channel.unary_stream(
                '/sensors.Sensors/GPSStream',
                request_serializer=ptolemy__pb2.StreamRequest.SerializeToString,
                response_deserializer=ptolemy__pb2.GPSData.FromString,
                )
        self.ImuStream = channel.unary_stream(
                '/sensors.Sensors/ImuStream',
                request_serializer=ptolemy__pb2.StreamRequest.SerializeToString,
                response_deserializer=ptolemy__pb2.ImuData.FromString,
                )
        self.TestStream = channel.unary_unary(
                '/sensors.Sensors/TestStream',
                request_serializer=ptolemy__pb2.StreamRequest.SerializeToString,
                response_deserializer=ptolemy__pb2.Hello.FromString,
                )
        self.IRStream = channel.unary_stream(
                '/sensors.Sensors/IRStream',
                request_serializer=ptolemy__pb2.StreamRequest.SerializeToString,
                response_deserializer=ptolemy__pb2.IRFrame.FromString,
                )


class SensorsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TurnOnImu(self, request, context):
        """rpc JoystickStream(StreamRequest) returns (stream Joystick) {}
        rpc CameraStream(StreamRequest) returns (stream CameraPoints) {}
        rpc FlatCameraStream(StreamRequest) returns (stream CameraPoints2D) {}
        rpc DropoffCameraStream(StreamRequest) returns (stream CameraPoints) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TurnOffImu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JsOverride(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetNavigationScaling(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GPSStream(self, request, context):
        """rpc StepCameraStream(StreamRequest) returns (stream CameraPoints) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImuStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IRStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SensorsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TurnOnImu': grpc.unary_unary_rpc_method_handler(
                    servicer.TurnOnImu,
                    request_deserializer=ptolemy__pb2.ImuCtrl.FromString,
                    response_serializer=ptolemy__pb2.Response.SerializeToString,
            ),
            'TurnOffImu': grpc.unary_unary_rpc_method_handler(
                    servicer.TurnOffImu,
                    request_deserializer=ptolemy__pb2.ImuCtrl.FromString,
                    response_serializer=ptolemy__pb2.Response.SerializeToString,
            ),
            'JsOverride': grpc.unary_unary_rpc_method_handler(
                    servicer.JsOverride,
                    request_deserializer=ptolemy__pb2.MlCtrl.FromString,
                    response_serializer=ptolemy__pb2.Response.SerializeToString,
            ),
            'SetNavigationScaling': grpc.unary_unary_rpc_method_handler(
                    servicer.SetNavigationScaling,
                    request_deserializer=ptolemy__pb2.NavigationScaling.FromString,
                    response_serializer=ptolemy__pb2.Response.SerializeToString,
            ),
            'GPSStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GPSStream,
                    request_deserializer=ptolemy__pb2.StreamRequest.FromString,
                    response_serializer=ptolemy__pb2.GPSData.SerializeToString,
            ),
            'ImuStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ImuStream,
                    request_deserializer=ptolemy__pb2.StreamRequest.FromString,
                    response_serializer=ptolemy__pb2.ImuData.SerializeToString,
            ),
            'TestStream': grpc.unary_unary_rpc_method_handler(
                    servicer.TestStream,
                    request_deserializer=ptolemy__pb2.StreamRequest.FromString,
                    response_serializer=ptolemy__pb2.Hello.SerializeToString,
            ),
            'IRStream': grpc.unary_stream_rpc_method_handler(
                    servicer.IRStream,
                    request_deserializer=ptolemy__pb2.StreamRequest.FromString,
                    response_serializer=ptolemy__pb2.IRFrame.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sensors.Sensors', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Sensors(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TurnOnImu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sensors.Sensors/TurnOnImu',
            ptolemy__pb2.ImuCtrl.SerializeToString,
            ptolemy__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TurnOffImu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sensors.Sensors/TurnOffImu',
            ptolemy__pb2.ImuCtrl.SerializeToString,
            ptolemy__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JsOverride(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sensors.Sensors/JsOverride',
            ptolemy__pb2.MlCtrl.SerializeToString,
            ptolemy__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetNavigationScaling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sensors.Sensors/SetNavigationScaling',
            ptolemy__pb2.NavigationScaling.SerializeToString,
            ptolemy__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GPSStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sensors.Sensors/GPSStream',
            ptolemy__pb2.StreamRequest.SerializeToString,
            ptolemy__pb2.GPSData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImuStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sensors.Sensors/ImuStream',
            ptolemy__pb2.StreamRequest.SerializeToString,
            ptolemy__pb2.ImuData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sensors.Sensors/TestStream',
            ptolemy__pb2.StreamRequest.SerializeToString,
            ptolemy__pb2.Hello.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IRStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sensors.Sensors/IRStream',
            ptolemy__pb2.StreamRequest.SerializeToString,
            ptolemy__pb2.IRFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
